var documenterSearchIndex = {"docs":
[{"location":"data_assimilation/#Data-assimilation-1","page":"Data Assimilation","title":"Data assimilation","text":"","category":"section"},{"location":"data_assimilation/#","page":"Data Assimilation","title":"Data Assimilation","text":"Modules = [NPSMC]\nPages   = [\"data_assimilation.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"data_assimilation/#NPSMC.DataAssimilation","page":"Data Assimilation","title":"NPSMC.DataAssimilation","text":"DataAssimilation( forecasting, method, np, xt, sigma2)\n\nparameters of the filtering method\n\nmethod :chosen method (:AnEnKF, :AnEnKS, :AnPF)\nN      : number of members (AnEnKF/AnEnKS) or particles (AnPF)\n\n\n\n\n\n","category":"type"},{"location":"generated/ex_model_forecasting/#","page":"Model Forecasting","title":"Model Forecasting","text":"EditURL = \"https://github.com/npsmc/NPSMC.jl/blob/master/docs/src/examples/ex_model_forecasting.jl\"","category":"page"},{"location":"generated/ex_model_forecasting/#Model-Forecasting-1","page":"Model Forecasting","title":"Model Forecasting","text":"","category":"section"},{"location":"generated/ex_model_forecasting/#","page":"Model Forecasting","title":"Model Forecasting","text":"using Plots\nusing NPSMC\nusing DifferentialEquations\n\nσ = 10.0\nρ = 28.0\nβ = 8.0/3\n\ndt_integration = 0.01\ndt_states      = 1\ndt_obs         = 8\nparameters     = [σ, ρ, β]\nvar_obs        = [1]\nnb_loop_train  = 100\nnb_loop_test   = 10\nsigma2_catalog = 0.0\nsigma2_obs     = 2.0\n\nssm = StateSpaceModel( lorenz63,\n                       dt_integration, dt_states, dt_obs,\n                       parameters, var_obs,\n                       nb_loop_train, nb_loop_test,\n                       sigma2_catalog, sigma2_obs )","category":"page"},{"location":"generated/ex_model_forecasting/#","page":"Model Forecasting","title":"Model Forecasting","text":"compute u0 to be in the attractor space","category":"page"},{"location":"generated/ex_model_forecasting/#","page":"Model Forecasting","title":"Model Forecasting","text":"u0    = [8.0;0.0;30.0]\ntspan = (0.0,5.0)\nprob  = ODEProblem(ssm.model, u0, tspan, parameters)\nu0    = last(solve(prob, reltol=1e-6, save_everystep=false))\n\nxt, yo, catalog = generate_data( ssm, u0 );\n\nplot( xt.t, vcat(xt.u'...)[:,1])\nscatter!( yo.t, vcat(yo.u'...)[:,1]; markersize=2)\n\nnp = 100\ndata_assimilation = DataAssimilation( ssm, xt)\n@time x̂ = data_assimilation(yo, PF(np));\nprintln(RMSE(xt, x̂))\n\n\n\nplot(xt.t, vcat(x̂.u'...)[:,1])\nscatter!(xt.t, vcat(xt.u'...)[:,1]; markersize=2)\nplot!(xt.t, vcat(x̂.u'...)[:,2])\nscatter!(xt.t, vcat(xt.u'...)[:,2]; markersize=2)\nplot!(xt.t, vcat(x̂.u'...)[:,3])\nscatter!(xt.t, vcat(xt.u'...)[:,3]; markersize=2)\n\n\n\np = plot3d(1, xlim=(-25,25), ylim=(-25,25), zlim=(0,50),\n            title = \"Lorenz 63\", marker = 2)\nfor x in eachrow(vcat(x̂.u'...))\n    push!(p, x...)\nend\np","category":"page"},{"location":"generated/ex_model_forecasting/#","page":"Model Forecasting","title":"Model Forecasting","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/ex_time_series/#","page":"Time Series","title":"Time Series","text":"EditURL = \"https://github.com/npsmc/NPSMC.jl/blob/master/docs/src/examples/ex_time_series.jl\"","category":"page"},{"location":"generated/ex_time_series/#Time-Series-1","page":"Time Series","title":"Time Series","text":"","category":"section"},{"location":"generated/ex_time_series/#","page":"Time Series","title":"Time Series","text":"using NPSMC\nusing Random\n\nnt, nv = 10, 3\nxt = TimeSeries(nt, nv)\n\ntime = collect(0:10.0)\nvalues = [rand(nv) for i = 1:nt]\nyo = TimeSeries(time, values)\n\nprintln(typeof(yo.t), typeof(yo.u))","category":"page"},{"location":"generated/ex_time_series/#","page":"Time Series","title":"Time Series","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/lorenz63/#","page":"Lorenz 63","title":"Lorenz 63","text":"EditURL = \"https://github.com/npsmc/NPSMC.jl/blob/master/docs/src/examples/lorenz63.jl\"","category":"page"},{"location":"generated/lorenz63/#Lorenz-63-1","page":"Lorenz 63","title":"Lorenz 63","text":"","category":"section"},{"location":"generated/lorenz63/#","page":"Lorenz 63","title":"Lorenz 63","text":"Data assimilation are numerical methods used in geosciences to mix the information of observations (noted as y) and a dynamical model (noted as f) in order to estimate the true/hidden state of the system (noted as x) at every time step k. Usually, they are related following a nonlinear state-space model: <img src=https://tandeo.files.wordpress.com/2019/02/formulennssmodel.png width=\"200\"> with eta and epsilon some independant white Gaussian noises respectively respresenting the model forecast error and the error of observation.","category":"page"},{"location":"generated/lorenz63/#","page":"Lorenz 63","title":"Lorenz 63","text":"In classical data assimilation, we require multiple runs of an explicit dynamical model f with possible severe limitations including the computational cost, the lack of consistency of the model with respect to the observed data as well as modeling uncertainties. Here, an alternative strategy is explored by developing a fully data-driven assimilation. No explicit knowledge of the dynamical model is required. Only a representative catalog of trajectories of the system is assumed to be available. Based on this catalog, the Analog Data Assimilation (AnDA) is introduced by combining machine learning with the analog method (or nearest neighbor search) and stochastic assimilation techniques including Ensemble Kalman Filter and Smoother (EnKF, EnKS) and Particle Filter (PF). We test the accuracy of the technic on different chaotic dynamical models, the Lorenz-63 and Lorenz-96 systems.","category":"page"},{"location":"generated/lorenz63/#","page":"Lorenz 63","title":"Lorenz 63","text":"This Julia program is dervied from the Python library is attached to the following publication: Lguensat, R., Tandeo, P., Ailliot, P., Pulido, M., & Fablet, R. (2017). The Analog Data Assimilation. Monthly Weather Review, 145(10), 4093-4107. If you use this library, please do not forget to cite this work.","category":"page"},{"location":"generated/lorenz63/#USING-PACKAGES-1","page":"Lorenz 63","title":"USING PACKAGES","text":"","category":"section"},{"location":"generated/lorenz63/#","page":"Lorenz 63","title":"Lorenz 63","text":"Here, we import the different Julia packages. In order to use the analog methog (or nearest neighboor search), we need to install the \"NPSMC\" library.","category":"page"},{"location":"generated/lorenz63/#","page":"Lorenz 63","title":"Lorenz 63","text":"using Plots, DifferentialEquations, NPSMC","category":"page"},{"location":"generated/lorenz63/#TEST-ON-LORENZ-63-1","page":"Lorenz 63","title":"TEST ON LORENZ-63","text":"","category":"section"},{"location":"generated/lorenz63/#","page":"Lorenz 63","title":"Lorenz 63","text":"To begin, as dynamical model f, we use the Lorenz-63 chaotic system. First, we generate simulated trajectories from this dynamical model and store them into the catalog. Then, we use this catalog to emulate the dynamical model and we apply the analog data assimilation. Finally, we compare the results of this data-driven approach to the classical data assimilation (using the true Lorenz-63 equations as dynamical model).","category":"page"},{"location":"generated/lorenz63/#GENERATE-SIMULATED-DATA-(LORENZ-63-MODEL)-1","page":"Lorenz 63","title":"GENERATE SIMULATED DATA (LORENZ-63 MODEL)","text":"","category":"section"},{"location":"generated/lorenz63/#","page":"Lorenz 63","title":"Lorenz 63","text":"σ = 10.0\nρ = 28.0\nβ = 8.0/3\n\ndt_integration = 0.01\ndt_states      = 1\ndt_obs         = 8\nparameters     = [σ, ρ, β]\nvar_obs        = [1]\nnb_loop_train  = 100\nnb_loop_test   = 10\nsigma2_catalog = 0.0\nsigma2_obs     = 2.0\n\nssm = StateSpaceModel( lorenz63,\n                       dt_integration, dt_states, dt_obs,\n                       parameters, var_obs,\n                       nb_loop_train, nb_loop_test,\n                       sigma2_catalog, sigma2_obs )","category":"page"},{"location":"generated/lorenz63/#","page":"Lorenz 63","title":"Lorenz 63","text":"compute u0 to be in the attractor space","category":"page"},{"location":"generated/lorenz63/#","page":"Lorenz 63","title":"Lorenz 63","text":"u0    = [8.0;0.0;30.0]\ntspan = (0.0,5.0)\nprob  = ODEProblem(ssm.model, u0, tspan, parameters)\nu0    = last(solve(prob, reltol=1e-6, save_everystep=false))\n\nxt, yo, catalog = generate_data( ssm, u0 );\n\nplot( xt.t, vcat(xt.u'...)[:,1])\nscatter!( yo.t, vcat(yo.u'...)[:,1]; markersize=2)\n\nregression = :local_linear\nsampling = :gaussian\nk, np = 100, 500","category":"page"},{"location":"generated/lorenz63/#CLASSICAL-DATA-ASSIMILATION-(dynamical-model-given-by-the-catalog)-1","page":"Lorenz 63","title":"CLASSICAL DATA ASSIMILATION (dynamical model given by the catalog)","text":"","category":"section"},{"location":"generated/lorenz63/#","page":"Lorenz 63","title":"Lorenz 63","text":"data_assimilation = DataAssimilation( ssm, xt )\nx̂_classical = data_assimilation(yo, EnKS(np))\n@time RMSE( xt, x̂_classical)","category":"page"},{"location":"generated/lorenz63/#ANALOG-DATA-ASSIMILATION-(dynamical-model-given-by-the-catalog)-1","page":"Lorenz 63","title":"ANALOG DATA ASSIMILATION (dynamical model given by the catalog)","text":"","category":"section"},{"location":"generated/lorenz63/#","page":"Lorenz 63","title":"Lorenz 63","text":"f  = AnalogForecasting( k, xt, catalog; regression = regression, sampling   = sampling )\ndata_assimilation = DataAssimilation( f, xt, ssm.sigma2_obs )\nx̂_analog = data_assimilation(yo, EnKS(np))\n@time RMSE( xt, x̂_analog)","category":"page"},{"location":"generated/lorenz63/#COMPARISON-BETWEEN-CLASSICAL-AND-ANALOG-DATA-ASSIMILATION-1","page":"Lorenz 63","title":"COMPARISON BETWEEN CLASSICAL AND ANALOG DATA ASSIMILATION","text":"","category":"section"},{"location":"generated/lorenz63/#","page":"Lorenz 63","title":"Lorenz 63","text":"plot( xt.t, vcat(xt.u'...)[:,1], label=\"true state\")\nplot!( xt.t, vcat(x̂_classical.u'...)[:,1], label=\"classical\")\nplot!( xt.t, vcat(x̂_analog.u'...)[:,1], label=\"analog\")\nscatter!( yo.t, vcat(yo.u'...)[:,1]; markersize=2, label=\"observations\")","category":"page"},{"location":"generated/lorenz63/#","page":"Lorenz 63","title":"Lorenz 63","text":"The results show that performances of the data-driven analog data assimilation are closed to those of the model-driven data assimilation. The error can be reduced by augmenting the size of the catalog \"nblooptrain\".","category":"page"},{"location":"generated/lorenz63/#Remark-1","page":"Lorenz 63","title":"Remark","text":"","category":"section"},{"location":"generated/lorenz63/#","page":"Lorenz 63","title":"Lorenz 63","text":"Note that for all the previous experiments, we use the robust Ensemble Kalman Smoother (EnKS) with the increment or local linear regressions and the Gaussian sampling. If you want to have realistic state estimations, we preconize the use of the Particle Filter (DA.method = 'PF') with the locally constant regression (AF.regression = 'locally_constant') and the multinomial sampler (AF.sampling = 'multinomial') with a large number of particles (DA.N). For more details about the different options, see the attached publication: Lguensat, R., Tandeo, P., Ailliot, P., Pulido, M., & Fablet, R. (2017). The Analog Data Assimilation. Monthly Weather Review, 145(10), 4093-4107.","category":"page"},{"location":"generated/lorenz63/#","page":"Lorenz 63","title":"Lorenz 63","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/ex_catalog/#","page":"Catalog","title":"Catalog","text":"EditURL = \"https://github.com/npsmc/NPSMC.jl/blob/master/docs/src/examples/ex_catalog.jl\"","category":"page"},{"location":"generated/ex_catalog/#Catalog-1","page":"Catalog","title":"Catalog","text":"","category":"section"},{"location":"generated/ex_catalog/#","page":"Catalog","title":"Catalog","text":"using Plots, NPSMC\n\nσ = 10.0\nρ = 28.0\nβ = 8.0/3\n\ndt_integration = 0.01\ndt_states      = 1\ndt_obs         = 8\nparameters     = [σ, ρ, β]\nvar_obs        = [1]\nnb_loop_train  = 100\nnb_loop_test   = 10\nsigma2_catalog = 0.0\nsigma2_obs     = 2.0\n\nssm = StateSpaceModel( lorenz63,\n                       dt_integration, dt_states, dt_obs,\n                       parameters, var_obs,\n                       nb_loop_train, nb_loop_test,\n                       sigma2_catalog, sigma2_obs )\n\n\nxt, yo, catalog = generate_data( ssm , [10.0;0.0;0.0]);\n\n\nplot(catalog.analogs[1,:])\nplot!(catalog.analogs[2,:])\nplot!(catalog.analogs[3,:])\n\n\np = plot3d(1, xlim=(-25,25), ylim=(-25,25), zlim=(0,50),\n                title = \"Lorenz 63\", marker = 1)\nfor x in eachcol(catalog.analogs)\n    push!(p, x...)\nend\np","category":"page"},{"location":"generated/ex_catalog/#","page":"Catalog","title":"Catalog","text":"This page was generated using Literate.jl.","category":"page"},{"location":"model_forecasting/#Model-forecasting-1","page":"Model forecasting","title":"Model forecasting","text":"","category":"section"},{"location":"model_forecasting/#","page":"Model forecasting","title":"Model forecasting","text":"Modules = [NPSMC]\nPages   = [\"model_forecasting.jl\"]","category":"page"},{"location":"model_forecasting/#NPSMC.StateSpaceModel-Tuple{Array{Float64,2}}","page":"Model forecasting","title":"NPSMC.StateSpaceModel","text":"Apply the dynamical models to generate numerical forecasts.\n\n\n\n\n\n","category":"method"},{"location":"particle_filters/#Particle-filters-1","page":"Particle filters","title":"Particle filters","text":"","category":"section"},{"location":"particle_filters/#","page":"Particle filters","title":"Particle filters","text":"Modules = [NPSMC]\nPages   = [\"particle_filters.jl\"]","category":"page"},{"location":"particle_filters/#NPSMC.DataAssimilation-Tuple{TimeSeries,PF}","page":"Particle filters","title":"NPSMC.DataAssimilation","text":"data_assimilation( yo, da, PF(100) )\n\nApply particle filters data assimilation technics using  model forecasting or analog forecasting. \n\n\n\n\n\n","category":"method"},{"location":"generated/ex_analog_forecasting/#","page":"Analog forecasting","title":"Analog forecasting","text":"EditURL = \"https://github.com/npsmc/NPSMC.jl/blob/master/docs/src/examples/ex_analog_forecasting.jl\"","category":"page"},{"location":"generated/ex_analog_forecasting/#Analog-forecasting-1","page":"Analog forecasting","title":"Analog forecasting","text":"","category":"section"},{"location":"generated/ex_analog_forecasting/#","page":"Analog forecasting","title":"Analog forecasting","text":"using Plots, DifferentialEquations, NPSMC\n\n\nσ = 10.0\nρ = 28.0\nβ = 8.0/3\n\ndt_integration = 0.01\ndt_states      = 1\ndt_obs         = 8\nvar_obs        = [1]\nnb_loop_train  = 100\nnb_loop_test   = 10\nsigma2_catalog = 0.0\nsigma2_obs     = 2.0\n\nssm = StateSpaceModel( lorenz63,\n                       dt_integration, dt_states, dt_obs,\n                       [σ, ρ, β], var_obs,\n                       nb_loop_train, nb_loop_test,\n                       sigma2_catalog, sigma2_obs )","category":"page"},{"location":"generated/ex_analog_forecasting/#compute-u0-to-be-in-the-attractor-space-1","page":"Analog forecasting","title":"compute u0 to be in the attractor space","text":"","category":"section"},{"location":"generated/ex_analog_forecasting/#","page":"Analog forecasting","title":"Analog forecasting","text":"u0    = [8.0;0.0;30.0]\ntspan = (0.0,5.0)\nprob  = ODEProblem(ssm.model, u0, tspan, ssm.params)\nu0    = last(solve(prob, reltol=1e-6, save_everystep=false))\n\nxt, yo, catalog = generate_data( ssm, u0 )\n\naf = AnalogForecasting( 50, xt, catalog;\n    regression = :local_linear, sampling = :multinomial )\n\nnp = 100\ndata_assimilation = DataAssimilation( af, xt, ssm.sigma2_obs)\nx̂ = data_assimilation(yo, EnKS(np));\nprintln(RMSE(xt, x̂))\n\nplot(xt.t, vcat(xt.u'...)[:,1], label=:true)\nplot!(xt.t, vcat(x̂.u'...)[:,1], label=:forecasted)\nscatter!(yo.t, vcat(yo.u'...)[:,1], markersize=2, label=:observed)","category":"page"},{"location":"generated/ex_analog_forecasting/#","page":"Analog forecasting","title":"Analog forecasting","text":"This page was generated using Literate.jl.","category":"page"},{"location":"models/#Models-1","page":"Models","title":"Models","text":"","category":"section"},{"location":"models/#","page":"Models","title":"Models","text":"Modules = [NPSMC]\nPages   = [\"models.jl\"]","category":"page"},{"location":"models/#NPSMC.lorenz63-NTuple{4,Any}","page":"Models","title":"NPSMC.lorenz63","text":"lorenz63(du, u, p, t)\n\nLorenz-63 dynamical model \n\nbegineqnarray\nu₁(t)  =  p₁ ( u₂(t) - u₁(t)) \nu₂(t)  =  u₁ ( p₂ - u₃(t)) - u₂(t) \nu₃(t)  =  u₂(t)u₁(t) - p₃u₃(t)\nendeqnarray\n\n\n\n\n\n","category":"method"},{"location":"models/#NPSMC.lorenz96-NTuple{4,Any}","page":"Models","title":"NPSMC.lorenz96","text":"lorenz96(S, t, F, J)\n\nLorenz-96 dynamical model \n\n\n\n\n\n","category":"method"},{"location":"models/#NPSMC.sinus-NTuple{4,Any}","page":"Models","title":"NPSMC.sinus","text":"sinus(du, u, p, t)\n\nSinus toy dynamical model \n\nu₁ = p₁ cos(p₁t) \n\n\n\n\n\n","category":"method"},{"location":"ensemble_filters/#Ensemble-filters-1","page":"Ensemble filters","title":"Ensemble filters","text":"","category":"section"},{"location":"ensemble_filters/#","page":"Ensemble filters","title":"Ensemble filters","text":"Modules = [NPSMC]\nPages   = [\"ensemble_filters.jl\"]","category":"page"},{"location":"ensemble_kalman_smoothers/#Ensemble-Kalman-smoothers-1","page":"Ensemble Kalman smoothers","title":"Ensemble Kalman smoothers","text":"","category":"section"},{"location":"ensemble_kalman_smoothers/#","page":"Ensemble Kalman smoothers","title":"Ensemble Kalman smoothers","text":"Modules = [NPSMC]\nPages   = [\"ensemble_kalman_smoothers.jl\"]","category":"page"},{"location":"ensemble_kalman_smoothers/#NPSMC.DataAssimilation-Tuple{TimeSeries,EnKS}","page":"Ensemble Kalman smoothers","title":"NPSMC.DataAssimilation","text":"data_assimilation( yo, da)\n\nApply stochastic and sequential data assimilation technics using  model forecasting or analog forecasting. \n\n\n\n\n\n","category":"method"},{"location":"state_space/#State-Space-1","page":"State Space","title":"State Space","text":"","category":"section"},{"location":"state_space/#","page":"State Space","title":"State Space","text":"Modules = [NPSMC]\nPages   = [\"state_space.jl\"]","category":"page"},{"location":"state_space/#NPSMC.StateSpaceModel","page":"State Space","title":"NPSMC.StateSpaceModel","text":"Space-State model is defined through the following equations\n\nleft\nbeginarrayl\nX_t = m(X_t-1) + eta_t \nY_t = H(X_t) + varepsilon_t\nendarray\nright\n\nX : hidden variables\nY : observed variables\ndt_integrationis the numerical time step used to solve the ODE.\ndt_states is the number of dt_integration between X_t-1 and X_t.\ndt_obs is the number of dt_integration between Y_t-1 and Y_t.\n\n\n\n\n\n","category":"type"},{"location":"state_space/#NPSMC.SSM","page":"State Space","title":"NPSMC.SSM","text":"Generate simulated data from Space State Model\n\nvar_obs            : indices of the observed variables\ndy                 : dimension of the observations\nQ                  : model covariance\nR                  : observation covariance\ndx                 : dimension of the state\ndt_int             : fixed integration time\ndt_model           : chosen number of model time step \nvar_obs            : indices of the observed variables\ndy                 : dimension of the observations\nH                  : first and third variables are observed\nh                  : observation model\njacH               : Jacobian of the observation model(for EKS_EM only)\nQ                  : model covariance\nR                  : observation covariance\n\n\n\n\n\n","category":"type"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"EditURL = \"https://github.com/npsmc/NPSMC.jl/blob/master/docs/src/examples/lorenz96.jl\"","category":"page"},{"location":"generated/lorenz96/#Lorenz-96-1","page":"Lorenz 96","title":"Lorenz 96","text":"","category":"section"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"Data assimilation are numerical methods used in geosciences to mix the information of observations (noted as y) and a dynamical model (noted as f) in order to estimate the true/hidden state of the system (noted as x) at every time step k. Usually, they are related following a nonlinear state-space model: <img src=https://tandeo.files.wordpress.com/2019/02/formulennssmodel.png width=\"200\"> with eta and epsilon some independant white Gaussian noises respectively respresenting the model forecast error and the error of observation.","category":"page"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"In classical data assimilation, we require multiple runs of an explicit dynamical model f with possible severe limitations including the computational cost, the lack of consistency of the model with respect to the observed data as well as modeling uncertainties. Here, an alternative strategy is explored by developing a fully data-driven assimilation. No explicit knowledge of the dynamical model is required. Only a representative catalog of trajectories of the system is assumed to be available. Based on this catalog, the Analog Data Assimilation (AnDA) is introduced by combining machine learning with the analog method (or nearest neighbor search) and stochastic assimilation techniques including Ensemble Kalman Filter and Smoother (EnKF, EnKS) and Particle Filter (PF). We test the accuracy of the technic on chaotic dynamical models, the Lorenz-96 system.","category":"page"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"This Julia program is dervied from the Python library is attached to the following publication: Lguensat, R., Tandeo, P., Ailliot, P., Pulido, M., & Fablet, R. (2017). The Analog Data Assimilation. Monthly Weather Review, 145(10), 4093-4107. If you use this library, please do not forget to cite this work.","category":"page"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"using Plots, NPSMC, DifferentialEquations, Random, LinearAlgebra","category":"page"},{"location":"generated/lorenz96/#TEST-ON-LORENZ-96-1","page":"Lorenz 96","title":"TEST ON LORENZ-96","text":"","category":"section"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"We also test the analog data assimilation procedure on the 40-dimensional Lorenz-96 dynamical model. As in the previous experiment, we generate state and observation data as well as simulated trajectories of the Lorenz-96 model in order to emulate the dynamical model. Here, we compare two analog data assimilation strategies: the global and local analog forecasting, respectively defined in finding similar situations on the whole 40 variables or on 5 variables recursively.","category":"page"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"","category":"page"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"rng = MersenneTwister(123)\nF = 8\nJ = 40 :: Int64\nparameters = [F, J]\ndt_integration = 0.05 # integration time\ndt_states = 1 # number of integration times between consecutive states (for xt and catalog)\ndt_obs = 4 # number of integration times between consecutive observations (for yo)\nvar_obs = randperm(rng, J)[1:20] # indices of the observed variables\nnb_loop_train = 100 # size of the catalog\nnb_loop_test = 10 # size of the true state and noisy observations\nsigma2_catalog = 0.   # variance of the model error to generate the catalog\nsigma2_obs = 2. # variance of the observation error to generate observations\n\nssm = StateSpaceModel( lorenz96,\n                       dt_integration, dt_states, dt_obs,\n                       parameters, var_obs,\n                       nb_loop_train, nb_loop_test,\n                       sigma2_catalog, sigma2_obs )","category":"page"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"","category":"page"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"5 time steps (to be in the attractor space)","category":"page"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"","category":"page"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"u0 = F .* ones(Float64, J)\nu0[J÷2] = u0[J÷2] + 0.01\n\ntspan = (0.0,5.0)\np = [F, J]\nprob  = ODEProblem(lorenz96, u0, tspan, p)\nsol = solve(prob, reltol=1e-6, saveat= dt_integration)\nx1  = [x[1] for x in sol.u]\nx20 = [x[20] for x in sol.u]\nx40 = [x[40] for x in sol.u]\nplot(sol.t, x1)\nplot!(sol.t, x20)\nplot!(sol.t, x40)","category":"page"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"","category":"page"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"run the data generation","category":"page"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"xt, yo, catalog = generate_data(ssm, u0);\nnothing #hide","category":"page"},{"location":"generated/lorenz96/#PLOT-STATE,-OBSERVATIONS-AND-CATALOG-1","page":"Lorenz 96","title":"PLOT STATE, OBSERVATIONS AND CATALOG","text":"","category":"section"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"plot(xt.t,  vcat(xt.u'...)[:,1], line=(:solid,:red), label=\"x1\")\nscatter!(yo.t, vcat(yo.u'...)[:,1], markersize=2)\nplot!(xt.t, vcat(xt.u'...)[:,20],line=(:solid,:blue), label=\"x20\")\nscatter!(yo.t, vcat(yo.u'...)[:,20],markersize=2)\nplot!(xt.t, vcat(xt.u'...)[:,40],line=(:solid,:green), label=\"x40\")\nscatter!(yo.t, vcat(yo.u'...)[:,40],markersize=2)\nxlabel!(\"Lorenz-96 times\")\ntitle!(\"Lorenz-96 true (continuous lines) and observed trajectories (dots)\")","category":"page"},{"location":"generated/lorenz96/#MODEL-DATA-ASSIMILATION-(with-the-global-analogs)-1","page":"Lorenz 96","title":"MODEL DATA ASSIMILATION (with the global analogs)","text":"","category":"section"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"data_assimilation = DataAssimilation( ssm, xt )\n@time x̂_classical_global  = data_assimilation(yo, EnKS(500));\n\nRMSE(xt, x̂_classical_global)\n\nlocal_analog_matrix =  BitArray{2}(diagm( -2  => trues(xt.nv-2),\n             -1  => trues(xt.nv-1),\n              0  => trues(xt.nv),\n              1  => trues(xt.nv-1),\n              2  => trues(xt.nv-2),\n             J-2 => trues(xt.nv-(J-2)),\n             J-1 => trues(xt.nv-(J-1)))\n    + transpose(diagm( J-2 => trues(xt.nv-(J-2)),\n             J-1 => trues(xt.nv-(J-1))))\n    );\nnothing #hide","category":"page"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"","category":"page"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"heatmap(local_analog_matrix)","category":"page"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"To define the local or global analog forecasting, we generate different matrices that will be use as the \"AF.neighborhood\" argument. For each variable of the system, we use 0 or 1 to indicate the absence or presence of other variables in the analog forecasting procedure. For instance, in the local analog matrix defined above, to predict the variable x_2 at time t+dt, we will use the local variables x_1, x_2, x_3, x_4 and x_40 at time t.  # -","category":"page"},{"location":"generated/lorenz96/#ANALOG-DATA-ASSIMILATION-(with-the-global-analogs)-1","page":"Lorenz 96","title":"ANALOG DATA ASSIMILATION (with the global analogs)","text":"","category":"section"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"f  = AnalogForecasting( 100, xt, catalog,\n    regression = :local_linear, sampling = :gaussian)\n\ndata_assimilation = DataAssimilation( f, xt, ssm.sigma2_obs )\n\n@time x̂_analog_global  = data_assimilation(yo, EnKS(500))\nRMSE(xt, x̂_analog_global)","category":"page"},{"location":"generated/lorenz96/#ANALOG-DATA-ASSIMILATION-(with-the-local-analogs)-1","page":"Lorenz 96","title":"ANALOG DATA ASSIMILATION (with the local analogs)","text":"","category":"section"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"neighborhood = local_analog_matrix\nregression = :local_linear\nsampling   = :gaussian\nf  = AnalogForecasting( 100, xt, catalog, neighborhood, regression, sampling)\ndata_assimilation = DataAssimilation( f, xt, ssm.sigma2_obs )\n@time x̂_analog_local  = data_assimilation(yo, EnKS(500))\nRMSE(xt, x̂_analog_local)","category":"page"},{"location":"generated/lorenz96/#COMPARISON-BETWEEN-GLOBAL-AND-LOCAL-ANALOG-DATA-ASSIMILATION-1","page":"Lorenz 96","title":"COMPARISON BETWEEN GLOBAL AND LOCAL ANALOG DATA ASSIMILATION","text":"","category":"section"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"import PyPlot\nfig = PyPlot.figure(figsize=(10,10))","category":"page"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"plot","category":"page"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"PyPlot.subplot(221)\nPyPlot.pcolormesh(hcat(xt.u...))\nPyPlot.ylabel(\"Lorenz-96 times\")\nPyPlot.title(\"True trajectories\")\nPyPlot.subplot(222)\nPyPlot.pcolormesh(isnan.(hcat(yo.u...)))\nPyPlot.ylabel(\"Lorenz-96 times\")\nPyPlot.title(\"Observed trajectories\")\nPyPlot.subplot(223)\nPyPlot.pcolormesh(hcat(x̂_analog_global.u...))\nPyPlot.ylabel(\"Lorenz-96 times\")\nPyPlot.title(\"Global analog data assimilation\")\nPyPlot.subplot(224)\nPyPlot.pcolormesh(hcat(x̂_analog_local.u...))\nPyPlot.ylabel(\"Lorenz-96 times\")\nPyPlot.title(\"Local analog data assimilation\")","category":"page"},{"location":"generated/lorenz96/#error-1","page":"Lorenz 96","title":"error","text":"","category":"section"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"println(\"RMSE(global analog DA) = $(RMSE(xt,x̂_analog_global))\")\nprintln(\"RMSE(local analog DA)  = $(RMSE(xt,x̂_analog_local))\")","category":"page"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"The results show that the global analog strategy do not reach satisfying results. Indeed, it is difficult to find relevant nearest neighboors on 40-dimensional vectors. The only way to improve the results in such a global strategy is to deeply increase the size of the catalog. At the contrary, in the local analog data assimilation, we are able to track correctly the true trajectories, even with a short catalog.","category":"page"},{"location":"generated/lorenz96/#Remark-1","page":"Lorenz 96","title":"Remark","text":"","category":"section"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"Note that for all the previous experiments, we use the robust Ensemble Kalman Smoother (EnKS) with the increment or local linear regressions and the Gaussian sampling. If you want to have realistic state estimations, we preconize the use of the Particle Filter (DA.method = 'PF') with the locally constant regression (AF.regression = 'locally_constant') and the multinomial sampler (AF.sampling = 'multinomial') with a large number of particles (DA.N). For more details about the different options, see the attached publication: Lguensat, R., Tandeo, P., Ailliot, P., Pulido, M., & Fablet, R. (2017). The Analog Data Assimilation. Monthly Weather Review, 145(10), 4093-4107.  # -","category":"page"},{"location":"generated/lorenz96/#","page":"Lorenz 96","title":"Lorenz 96","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/sinus_data/#","page":"Sinus model","title":"Sinus model","text":"EditURL = \"https://github.com/npsmc/NPSMC.jl/blob/master/docs/src/examples/sinus_data.jl\"","category":"page"},{"location":"generated/sinus_data/#Sinus-model-1","page":"Sinus model","title":"Sinus model","text":"","category":"section"},{"location":"generated/sinus_data/#","page":"Sinus model","title":"Sinus model","text":"using LinearAlgebra\nusing NPSMC\nusing Plots","category":"page"},{"location":"generated/sinus_data/#Generate-simulated-data-(Sinus-Model)-1","page":"Sinus model","title":"Generate simulated data (Sinus Model)","text":"","category":"section"},{"location":"generated/sinus_data/#","page":"Sinus model","title":"Sinus model","text":"parameters","category":"page"},{"location":"generated/sinus_data/#","page":"Sinus model","title":"Sinus model","text":"dx       = 1                # dimension of the state\ndt_int   = 1.               # fixed integration time\ndt_model = 1                # chosen number of model time step\nvar_obs  = [0]              # indices of the observed variables\ndy       = length(var_obs)  # dimension of the observations\n\nfunction h(x) # observation model\n    dx = length(x)\n    H = Matrix(I,dx,dx)\n    H .* x\nend\n\njac_h(x)  = x\nconst a = 3. :: Float64\nmx(x)     = sin.(a .* x)\njac_mx(x) = a .* cos.( a .* x)","category":"page"},{"location":"generated/sinus_data/#","page":"Sinus model","title":"Sinus model","text":"Setting covariances","category":"page"},{"location":"generated/sinus_data/#","page":"Sinus model","title":"Sinus model","text":"sig2_Q = 0.1\nsig2_R = 0.1","category":"page"},{"location":"generated/sinus_data/#","page":"Sinus model","title":"Sinus model","text":"prior state","category":"page"},{"location":"generated/sinus_data/#","page":"Sinus model","title":"Sinus model","text":"x0 = [1.]\n\nsinus3   = NPSMC.SSM(h, jac_h, mx, jac_mx, dt_int, dt_model, x0, var_obs, sig2_Q, sig2_R)","category":"page"},{"location":"generated/sinus_data/#","page":"Sinus model","title":"Sinus model","text":"generate data","category":"page"},{"location":"generated/sinus_data/#","page":"Sinus model","title":"Sinus model","text":"T        = 2000# length of the training\nX, Y     = generate_data( sinus3, x0, T)\n\nvalues = vcat(X.u'...)\nscatter( values, mx(values))\nscatter!(values[1:end-1], values[2:end], markersize=2)","category":"page"},{"location":"generated/sinus_data/#","page":"Sinus model","title":"Sinus model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/test_monte_carlo/#","page":"Monte-Carlo","title":"Monte-Carlo","text":"EditURL = \"https://github.com/npsmc/NPSMC.jl/blob/master/docs/src/examples/test_monte_carlo.jl\"","category":"page"},{"location":"generated/test_monte_carlo/#Monte-Carlo-1","page":"Monte-Carlo","title":"Monte-Carlo","text":"","category":"section"},{"location":"generated/test_monte_carlo/#","page":"Monte-Carlo","title":"Monte-Carlo","text":"using DifferentialEquations\nusing Distributions\nusing LinearAlgebra\nusing NPSMC\nusing Plots\n\nx0 = [8.0;0.0;30.0]\ntspan = (0.0,5.0)\np = [10.0,28.0,8/3]\nprob = ODEProblem(lorenz63, x0, tspan, p)\nx0 = last(solve(prob, reltol=1e-6, save_everystep=false))'\n\nnp = 10\nμ = [0.,0.,0.]\nσ = 1.0 .* Matrix(I, 3, 3)\nd = MvNormal( μ, σ)\nx = x0 .+ rand(d, np)'\n\ndt = 1.0\ntspan = (0.0, dt)\nx0    = [8.0;0.0;30.0]\n\nprob  = ODEProblem( lorenz63, x0, tspan, p)\n\nfunction prob_func( prob, i, repeat)\n    prob.u0 .= x[i,:]\n    prob\nend\n\nmonte_prob = MonteCarloProblem(prob, prob_func=prob_func)\n\nsim = solve(monte_prob, Tsit5(), trajectories=np)\n\nplot(sim)","category":"page"},{"location":"generated/test_monte_carlo/#","page":"Monte-Carlo","title":"Monte-Carlo","text":"This page was generated using Literate.jl.","category":"page"},{"location":"analog_forecasting/#Analog-forecasting-1","page":"Analog forecasting","title":"Analog forecasting","text":"","category":"section"},{"location":"analog_forecasting/#","page":"Analog forecasting","title":"Analog forecasting","text":"Modules = [NPSMC]\nPages   = [\"analog_forecasting.jl\"]","category":"page"},{"location":"analog_forecasting/#NPSMC.AnalogForecasting","page":"Analog forecasting","title":"NPSMC.AnalogForecasting","text":"AnalogForecasting(k, xt, catalog)\n\nparameters of the analog forecasting method\n\nk            : number of analogs\nneighborhood : global analogs\ncatalog      : catalog with analogs and successors\nregression   : (:locallyconstant, :increment, :locallinear)\nsampling     : (:gaussian, :multinomial)\n\n\n\n\n\n","category":"type"},{"location":"analog_forecasting/#NPSMC.AnalogForecasting-Tuple{Array{Float64,2}}","page":"Analog forecasting","title":"NPSMC.AnalogForecasting","text":"Apply the analog method on catalog of historical data \nto generate forecasts.\n\n\n\n\n\n","category":"method"},{"location":"analog_forecasting/#","page":"Analog forecasting","title":"Analog forecasting","text":"using Plots, DifferentialEquations, NPSMC\n\n\nσ = 10.0\nρ = 28.0\nβ = 8.0/3\n\ndt_integration = 0.01\ndt_states      = 1 \ndt_obs         = 8 \nvar_obs        = [1]\nnb_loop_train  = 100 \nnb_loop_test   = 10\nsigma2_catalog = 0.0\nsigma2_obs     = 2.0\n\nssm = StateSpaceModel( lorenz63,\n                       dt_integration, dt_states, dt_obs, \n                       [σ, ρ, β], var_obs,\n                       nb_loop_train, nb_loop_test,\n                       sigma2_catalog, sigma2_obs )\n\nu0    = [8.0;0.0;30.0]\ntspan = (0.0,5.0)\nprob  = ODEProblem(ssm.model, u0, tspan, ssm.params)\nu0    = last(solve(prob, reltol=1e-6, save_everystep=false))\n\nxt, yo, catalog = generate_data( ssm, u0 )\n\naf = AnalogForecasting( 50, xt, catalog; \n    regression = :local_linear, sampling = :multinomial )\n\nnp = 100\ndata_assimilation = DataAssimilation( af, xt, ssm.sigma2_obs)\nx̂ = data_assimilation(yo, EnKS(np));\nprintln(RMSE(xt, x̂))\n\nplot(xt.t, vcat(xt.u'...)[:,1], label=:true)\nplot!(xt.t, vcat(x̂.u'...)[:,1], label=:forecasted)\nscatter!(yo.t, vcat(yo.u'...)[:,1], markersize=2, label=:observed)\n","category":"page"},{"location":"catalog/#Catalog-1","page":"Catalog","title":"Catalog","text":"","category":"section"},{"location":"catalog/#","page":"Catalog","title":"Catalog","text":"Modules = [NPSMC]\nPages   = [\"catalog.jl\"]","category":"page"},{"location":"catalog/#NPSMC.Catalog","page":"Catalog","title":"NPSMC.Catalog","text":"Catalog( data, ssm)\n\nData type to store analogs and succesors observations from the Space State model\n\n\n\n\n\n","category":"type"},{"location":"#NPSMC.jl-1","page":"Home","title":"NPSMC.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Documentation for NPSMC.jl","category":"page"},{"location":"time-series/#Time-Series-1","page":"Time Series","title":"Time Series","text":"","category":"section"},{"location":"time-series/#","page":"Time Series","title":"Time Series","text":"Modules = [NPSMC]\nPages   = [\"time_series.jl\"]","category":"page"},{"location":"time-series/#","page":"Time Series","title":"Time Series","text":"using NPSMC\nusing Random\n\n# Initialize a times series with size\n\nnt, nv = 10, 3\nxt = TimeSeries(nt, nv)\n\n# Initialize a times series with values\n\ntime = collect(0:10.0)\nvalues = [rand(nv) for i = 1:nt]\nyo = TimeSeries(time, values)\n","category":"page"}]
}
