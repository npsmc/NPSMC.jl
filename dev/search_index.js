var documenterSearchIndex = {"docs":
[{"location":"data_assimilation/#Data-assimilation-1","page":"Data Assimilation","title":"Data assimilation","text":"","category":"section"},{"location":"data_assimilation/#","page":"Data Assimilation","title":"Data Assimilation","text":"Modules = [NPSMC]\nPages   = [\"data_assimilation.jl\"]\nOrder   = [:type, :function]","category":"page"},{"location":"data_assimilation/#NPSMC.DataAssimilation","page":"Data Assimilation","title":"NPSMC.DataAssimilation","text":"DataAssimilation( forecasting, method, np, xt, sigma2)\n\nparameters of the filtering method\n\nmethod :chosen method (:AnEnKF, :AnEnKS, :AnPF)\nN      : number of members (AnEnKF/AnEnKS) or particles (AnPF)\n\n\n\n\n\n","category":"type"},{"location":"ensemble_kalman_filters/#Ensemble-filters-1","page":"Ensemble Kalman filters","title":"Ensemble filters","text":"","category":"section"},{"location":"ensemble_kalman_filters/#","page":"Ensemble Kalman filters","title":"Ensemble Kalman filters","text":"Modules = [NPSMC]\nPages   = [\"ensemble_kalman_filters.jl\"]","category":"page"},{"location":"ensemble_kalman_filters/#NPSMC.DataAssimilation-Tuple{TimeSeries,EnKF}","page":"Ensemble Kalman filters","title":"NPSMC.DataAssimilation","text":"data_assimilation( yo, da)\n\nApply stochastic and sequential data assimilation technics using  model forecasting or analog forecasting. \n\n\n\n\n\n","category":"method"},{"location":"ensemble_kalman_filters/#NPSMC.EnKF","page":"Ensemble Kalman filters","title":"NPSMC.EnKF","text":"EnKF( np )\n\nEnsemble Kalman Filters\n\n\n\n\n\n","category":"type"},{"location":"particle_filters/#Particle-filters-1","page":"Particle filters","title":"Particle filters","text":"","category":"section"},{"location":"particle_filters/#","page":"Particle filters","title":"Particle filters","text":"Modules = [NPSMC]\nPages   = [\"particle_filters.jl\"]","category":"page"},{"location":"particle_filters/#NPSMC.DataAssimilation-Tuple{TimeSeries,PF}","page":"Particle filters","title":"NPSMC.DataAssimilation","text":"data_assimilation( yo, da, PF(100) )\n\nApply particle filters data assimilation technics using  model forecasting or analog forecasting. \n\n\n\n\n\n","category":"method"},{"location":"state-space/#State-Space-1","page":"State Space","title":"State Space","text":"","category":"section"},{"location":"state-space/#","page":"State Space","title":"State Space","text":"Modules = [NPSMC]\nPages   = [\"state_space.jl\"]","category":"page"},{"location":"state-space/#NPSMC.StateSpaceModel","page":"State Space","title":"NPSMC.StateSpaceModel","text":"Space-State model is defined through the following equations\n\nleft\nbeginarrayl\nX_t = m(X_t-1) + eta_t \nY_t = H(X_t) + varepsilon_t\nendarray\nright\n\nX : hidden variables\nY : observed variables\ndt_integrationis the numerical time step used to solve the ODE.\ndt_states is the number of dt_integration between X_t-1 and X_t.\ndt_obs is the number of dt_integration between Y_t-1 and Y_t.\n\n\n\n\n\n","category":"type"},{"location":"state-space/#NPSMC.SSM","page":"State Space","title":"NPSMC.SSM","text":"Generate simulated data from Space State Model\n\nvar_obs            : indices of the observed variables\ndy                 : dimension of the observations\nQ                  : model covariance\nR                  : observation covariance\ndx                 : dimension of the state\ndt_int             : fixed integration time\ndt_model           : chosen number of model time step \nvar_obs            : indices of the observed variables\ndy                 : dimension of the observations\nH                  : first and third variables are observed\nh                  : observation model\njacH               : Jacobian of the observation model(for EKS_EM only)\nQ                  : model covariance\nR                  : observation covariance\n\n\n\n\n\n","category":"type"},{"location":"models/#Models-1","page":"Models","title":"Models","text":"","category":"section"},{"location":"models/#","page":"Models","title":"Models","text":"Modules = [NPSMC]\nPages   = [\"models.jl\"]","category":"page"},{"location":"models/#NPSMC.lorenz63-NTuple{4,Any}","page":"Models","title":"NPSMC.lorenz63","text":"lorenz63(du, u, p, t)\n\nLorenz-63 dynamical model u = x y z and p = sigma rho mu:\n\nbeginalign\nfracdxdt = σ(y-x) \nfracdydt = x(ρ-z) - y \nfracdzdt = xy - βz \nendalign\n\n\n\n\n\n","category":"method"},{"location":"models/#NPSMC.lorenz96-NTuple{4,Any}","page":"Models","title":"NPSMC.lorenz96","text":"lorenz96(S, t, F, J)\n\nLorenz-96 dynamical model. For i=1N:\n\nfracdx_idt = (x_i+1-x_i-2)x_i-1 - x_i + F\n\nwhere it is assumed that x_-1=x_N-1x_0=x_N and x_N+1=x_1.  Here x_i is the state of the system and F is a forcing constant. \n\n\n\n\n\n","category":"method"},{"location":"models/#NPSMC.sinus-NTuple{4,Any}","page":"Models","title":"NPSMC.sinus","text":"sinus(du, u, p, t)\n\nSinus toy dynamical model \n\nu₁ = p₁ cos(p₁t) \n\n\n\n\n\n","category":"method"},{"location":"ensemble_kalman_smoothers/#Ensemble-Kalman-smoothers-1","page":"Ensemble Kalman smoothers","title":"Ensemble Kalman smoothers","text":"","category":"section"},{"location":"ensemble_kalman_smoothers/#","page":"Ensemble Kalman smoothers","title":"Ensemble Kalman smoothers","text":"Modules = [NPSMC]\nPages   = [\"ensemble_kalman_smoothers.jl\"]","category":"page"},{"location":"ensemble_kalman_smoothers/#NPSMC.DataAssimilation-Tuple{TimeSeries,EnKS}","page":"Ensemble Kalman smoothers","title":"NPSMC.DataAssimilation","text":"data_assimilation( yo, da)\n\nApply stochastic and sequential data assimilation technics using  model forecasting or analog forecasting. \n\n\n\n\n\n","category":"method"},{"location":"utils/#Utilities-1","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"utils/#","page":"Utilities","title":"Utilities","text":"Modules = [NPSMC]\nPages   = [\"utils.jl\"]","category":"page"},{"location":"utils/#NPSMC.RMSE-Tuple{Any,Any}","page":"Utilities","title":"NPSMC.RMSE","text":"RMSE(a, b)\n\nCompute the Root Mean Square Error between 2 n-dimensional vectors.\n\n\n\n\n\n","category":"method"},{"location":"utils/#NPSMC.ensure_pos_sym-Union{Tuple{Array{T,2}}, Tuple{T}} where T<:AbstractFloat","page":"Utilities","title":"NPSMC.ensure_pos_sym","text":"ensure_pos_sym(M; ϵ= 1e-8)\n\nEnsure that matrix M is positive and symmetric to avoid numerical errors when numbers are small by doing (M + M')/2 + ϵ*I\n\nreference : StateSpaceModels.jl\n\n\n\n\n\n","category":"method"},{"location":"utils/#NPSMC.inv_using_SVD-Tuple{Any,Any}","page":"Utilities","title":"NPSMC.inv_using_SVD","text":"inv_using_SVD(Mat, eigvalMax)\n\nSVD decomposition of Matrix. \n\n\n\n\n\n","category":"method"},{"location":"utils/#NPSMC.mk_stochastic!-Tuple{Array{Float64,2}}","page":"Utilities","title":"NPSMC.mk_stochastic!","text":"mk_stochastic!(w)\n\nEnsure the matrix is stochastic, i.e.,  the sum over the last dimension is 1.\n\n\n\n\n\n","category":"method"},{"location":"utils/#NPSMC.normalise!-Tuple{Any}","page":"Utilities","title":"NPSMC.normalise!","text":"normalise!( w )\n\nNormalize the entries of a multidimensional array sum to 1.\n\n\n\n\n\n","category":"method"},{"location":"utils/#NPSMC.resample!-Tuple{Array{Int64,1},Array{Float64,1}}","page":"Utilities","title":"NPSMC.resample!","text":"resample!( indx, w )\n\nMultinomial resampler.\n\n\n\n\n\n","category":"method"},{"location":"utils/#NPSMC.resample_multinomial-Tuple{Array{Float64,1}}","page":"Utilities","title":"NPSMC.resample_multinomial","text":"resample_multinomial( w )\n\nMultinomial resampler. \n\n\n\n\n\n","category":"method"},{"location":"utils/#NPSMC.sample_discrete-Tuple{Any,Any,Any}","page":"Utilities","title":"NPSMC.sample_discrete","text":"sample_discrete(prob, r, c)\n\nSampling from a non-uniform distribution. \n\n\n\n\n\n","category":"method"},{"location":"forecasting/#Forecasting-1","page":"Forecasting","title":"Forecasting","text":"","category":"section"},{"location":"forecasting/#","page":"Forecasting","title":"Forecasting","text":"Modules = [NPSMC]\nPages   = [\"model_forecasting.jl\", \"analog_forecasting.jl\"]","category":"page"},{"location":"forecasting/#NPSMC.StateSpaceModel-Tuple{Array{Float64,2}}","page":"Forecasting","title":"NPSMC.StateSpaceModel","text":"Apply the dynamical models to generate numerical forecasts.\n\n\n\n\n\n","category":"method"},{"location":"forecasting/#NPSMC.AnalogForecasting","page":"Forecasting","title":"NPSMC.AnalogForecasting","text":"AnalogForecasting(k, xt, catalog)\n\nparameters of the analog forecasting method\n\nk            : number of analogs\nneighborhood : global analogs\ncatalog      : catalog with analogs and successors\nregression   : (:locallyconstant, :increment, :locallinear)\nsampling     : (:gaussian, :multinomial)\n\n\n\n\n\n","category":"type"},{"location":"forecasting/#NPSMC.AnalogForecasting-Tuple{Array{Float64,2}}","page":"Forecasting","title":"NPSMC.AnalogForecasting","text":"Apply the analog method on catalog of historical data \nto generate forecasts.\n\n\n\n\n\n","category":"method"},{"location":"catalog/#Catalog-1","page":"Catalog","title":"Catalog","text":"","category":"section"},{"location":"catalog/#","page":"Catalog","title":"Catalog","text":"Modules = [NPSMC]\nPages   = [\"catalog.jl\", \"generate_data.jl\"]","category":"page"},{"location":"catalog/#NPSMC.Catalog","page":"Catalog","title":"NPSMC.Catalog","text":"Catalog( data, ssm)\n\nData type to store analogs and succesors observations from the Space State model\n\n\n\n\n\n","category":"type"},{"location":"catalog/#NPSMC.generate_data","page":"Catalog","title":"NPSMC.generate_data","text":"generate_data( ssm, u0; seed=42)\n\nfrom StateSpace generate:\n\ntrue state (xt)\npartial/noisy observations (yo)\ncatalog\n\n\n\n\n\n","category":"function"},{"location":"catalog/#NPSMC.generate_data-Tuple{NPSMC.SSM,Array{Float64,1},Int64}","page":"Catalog","title":"NPSMC.generate_data","text":" generate_data(ssm, T_burnin, T; seed = 1)\n\nGenerate simulated data from Space State Model\n\n\n\n\n\n","category":"method"},{"location":"catalog/#NPSMC.train_test_split-Tuple{TimeSeries,TimeSeries}","page":"Catalog","title":"NPSMC.train_test_split","text":"train_test_split( X, Y; test_size)\n\nSplit time series into random train and test subsets\n\n\n\n\n\n","category":"method"},{"location":"#NPSMC.jl-1","page":"Home","title":"NPSMC.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Documentation for NPSMC.jl","category":"page"},{"location":"time-series/#Time-Series-1","page":"Time Series","title":"Time Series","text":"","category":"section"},{"location":"time-series/#","page":"Time Series","title":"Time Series","text":"Modules = [NPSMC]\nPages   = [\"time_series.jl\"]","category":"page"}]
}
